// Outfit Builder Page Component for Casual Chic Boutique 2.0

// storefront/src/pages/outfit-builder.js
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { useProducts } from '../hooks/useProducts';
import { useOutfits } from '../hooks/useOutfits';
import { useAuth } from '../hooks/useAuth';
import Layout from '../components/Layout';
import Breadcrumbs from '../components/Breadcrumbs';
import Loader from '../components/Loader';
import DraggableProduct from '../components/outfit-builder/DraggableProduct';
import OutfitDropZone from '../components/outfit-builder/OutfitDropZone';
import OutfitSummary from '../components/outfit-builder/OutfitSummary';
import ProductFilters from '../components/outfit-builder/ProductFilters';
import LoginPrompt from '../components/LoginPrompt';

const OutfitBuilderPage = () => {
  const router = useRouter();
  const { user } = useAuth();
  const { outfits, createOutfit, isLoading: outfitLoading, error: outfitError } = useOutfits();
  
  // Outfit state
  const [outfitItems, setOutfitItems] = useState([]);
  const [outfitName, setOutfitName] = useState('');
  const [outfitDescription, setOutfitDescription] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [saveError, setSaveError] = useState(null);
  const [saveSuccess, setSaveSuccess] = useState(false);
  
  // Product filters
  const [activeCategory, setActiveCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    color: [],
    size: [],
    price: [0, 1000],
    sort: 'popularity'
  });
  
  // Prepare product query parameters
  const productParams = {
    limit: 24,
    category_id: activeCategory !== 'all' ? activeCategory : undefined,
    q: searchQuery || undefined,
    // Add other filters
  };
  
  // Get products
  const { products, isLoading: productsLoading, error: productsError } = useProducts(productParams);
  
  // Add product to outfit
  const handleAddToOutfit = (product) => {
    // Check if product already exists in outfit
    if (!outfitItems.find(item => item.id === product.id)) {
      setOutfitItems([...outfitItems, product]);
    }
  };
  
  // Remove product from outfit
  const handleRemoveFromOutfit = (productId) => {
    setOutfitItems(outfitItems.filter(item => item.id !== productId));
  };
  
  // Move product in outfit (reordering)
  const handleMoveProduct = (dragIndex, hoverIndex) => {
    const newItems = [...outfitItems];
    const draggedItem = newItems[dragIndex];
    
    // Remove the item
    newItems.splice(dragIndex, 1);
    
    // Insert at new position
    newItems.splice(hoverIndex, 0, draggedItem);
    
    setOutfitItems(newItems);
  };
  
  // Handle category change
  const handleCategoryChange = (categoryId) => {
    setActiveCategory(categoryId);
  };
  
  // Handle search
  const handleSearch = (query) => {
    setSearchQuery(query);
  };
  
  // Handle filter change
  const handleFilterChange = (filterName, value) => {
    setFilters({
      ...filters,
      [filterName]: value
    });
  };
  
  // Save outfit
  const handleSaveOutfit = async () => {
    if (!user) {
      // Show login prompt
      return;
    }
    
    if (!outfitName) {
      setSaveError('Please enter a name for your outfit');
      return;
    }
    
    if (outfitItems.length === 0) {
      setSaveError('Your outfit must contain at least one item');
      return;
    }
    
    setIsSaving(true);
    setSaveError(null);
    setSaveSuccess(false);
    
    try {
      const outfitData = {
        name: outfitName,
        description: outfitDescription,
        products: outfitItems.map(item => ({ id: item.id })),
        // Set created_by in the API based on the authenticated user
      };
      
      await createOutfit(outfitData);
      setSaveSuccess(true);
      
      // Clear form after successful save
      setOutfitName('');
      setOutfitDescription('');
      setOutfitItems([]);
      
      // Clear success message after a delay
      setTimeout(() => {
        setSaveSuccess(false);
      }, 5000);
    } catch (error) {
      console.error('Error saving outfit:', error);
      setSaveError('Error saving outfit. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };
  
  // Clear outfit
  const handleClearOutfit = () => {
    setOutfitItems([]);
    setOutfitName('');
    setOutfitDescription('');
    setSaveError(null);
    setSaveSuccess(false);
  };
  
  // Calculate total price of outfit
  const calculateTotalPrice = () => {
    return outfitItems.reduce((total, item) => {
      const price = item.variants && item.variants[0]?.prices && item.variants[0]?.prices[0]?.amount || 0;
      return total + price;
    }, 0);
  };
  
  return (
    <Layout title="Outfit Builder - Casual Chic Boutique">
      <div className="container py-8">
        {/* Breadcrumbs */}
        <Breadcrumbs
          items={[
            { label: 'Home', href: '/' },
            { label: 'Outfit Builder', href: null }
          ]}
          className="mb-6"
        />
        
        <h1 className="text-3xl font-serif mb-8">Create Your Perfect Outfit</h1>
        
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Product Selection Area */}
          <div className="lg:w-2/3">
            <DndProvider backend={HTML5Backend}>
              <div className="outfit-builder-container">
                {/* Product Filters */}
                <div className="bg-white rounded-lg shadow p-4 mb-6">
                  <ProductFilters
                    activeCategory={activeCategory}
                    onCategoryChange={handleCategoryChange}
                    searchQuery={searchQuery}
                    onSearch={handleSearch}
                    filters={filters}
                    onFilterChange={handleFilterChange}
                  />
                </div>
                
                {/* Product Grid */}
                <div className="bg-white rounded-lg shadow p-4 mb-6">
                  <h2 className="text-xl font-medium mb-4">Available Items</h2>
                  
                  {productsLoading ? (
                    <div className="text-center py-12">
                      <Loader />
                    </div>
                  ) : productsError ? (
                    <div className="text-center py-12">
                      <p className="text-error">Error loading products. Please try again.</p>
                    </div>
                  ) : products.length === 0 ? (
                    <div className="text-center py-12">
                      <p>No products found. Try adjusting your filters.</p>
                    </div>
                  ) : (
                    <div className="product-grid grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                      {products.map(product => (
                        <DraggableProduct
                          key={product.id}
                          product={product}
                          onAddToOutfit={handleAddToOutfit}
                        />
                      ))}
                    </div>
                  )}
                </div>
                
                {/* Outfit Drop Zone */}
                <div className="bg-white rounded-lg shadow p-4">
                  <h2 className="text-xl font-medium mb-4">Your Outfit</h2>
                  
                  <OutfitDropZone
                    outfitItems={outfitItems}
                    onRemoveFromOutfit={handleRemoveFromOutfit}
                    onMoveProduct={handleMoveProduct}
                  />
                </div>
              </div>
            </DndProvider>
          </div>
          
          {/* Outfit Summary & Controls */}
          <div className="lg:w-1/3">
            <div className="sticky top-4 space-y-6">
              {/* Outfit Summary */}
              <OutfitSummary
                outfitItems={outfitItems}
                totalPrice={calculateTotalPrice()}
              />
              
              {/* Outfit Details Form */}
              <div className="bg-white rounded-lg shadow p-4">
                <h2 className="text-xl font-medium mb-4">Outfit Details</h2>
                
                <div className="space-y-4">
                  <div className="form-group">
                    <label htmlFor="outfit-name" className="form-label">
                      Outfit Name <span className="text-error">*</span>
                    </label>
                    <input
                      type="text"
                      id="outfit-name"
                      className="form-control"
                      value={outfitName}
                      onChange={(e) => setOutfitName(e.target.value)}
                      placeholder="e.g. Summer Weekend Look"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="outfit-description" className="form-label">
                      Description
                    </label>
                    <textarea
                      id="outfit-description"
                      className="form-control"
                      rows="3"
                      value={outfitDescription}
                      onChange={(e) => setOutfitDescription(e.target.value)}
                      placeholder="Describe your outfit..."
                    ></textarea>
                  </div>
                </div>
              </div>
              
              {/* Action Buttons */}
              <div className="flex flex-col space-y-3">
                {/* Save Button */}
                <button
                  className="btn btn-primary"
                  onClick={handleSaveOutfit}
                  disabled={isSaving || outfitItems.length === 0}
                >
                  {isSaving ? 'Saving...' : 'Save Outfit'}
                </button>
                
                {/* Clear Button */}
                <button
                  className="btn btn-secondary"
                  onClick={handleClearOutfit}
                  disabled={outfitItems.length === 0}
                >
                  Clear Outfit
                </button>
                
                {/* Add All to Cart */}
                <button
                  className="btn btn-outline"
                  disabled={outfitItems.length === 0}
                  onClick={() => router.push('/cart')}
                >
                  Add All Items to Cart
                </button>
              </div>
              
              {/* Error or Success Messages */}
              {saveError && (
                <div className="bg-error/10 text-error p-3 rounded">
                  {saveError}
                </div>
              )}
              
              {saveSuccess && (
                <div className="bg-success/10 text-success p-3 rounded">
                  Outfit saved successfully!
                </div>
              )}
              
              {/* Login Prompt (if not logged in) */}
              {!user && (
                <LoginPrompt message="Log in to save your outfits and access them anytime." />
              )}
            </div>
          </div>
        </div>
        
        {/* Outfit Tips */}
        <div className="mt-12 bg-light rounded-lg p-6">
          <h2 className="text-2xl font-serif mb-4">Outfit Building Tips</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="outfit-tip">
              <h3 className="text-lg font-medium mb-2">Balance Proportions</h3>
              <p>
                Create balanced outfits by pairing loose tops with fitted bottoms, 
                or vice versa. This creates a flattering silhouette for any body type.
              </p>
            </div>
            
            <div className="outfit-tip">
              <h3 className="text-lg font-medium mb-2">Color Coordination</h3>
              <p>
                Work with a color palette of 2-3 main colors. Use complementary colors
                for a bold look, or analogous colors for a more harmonious outfit.
              </p>
            </div>
            
            <div className="outfit-tip">
              <h3 className="text-lg font-medium mb-2">Layer Strategically</h3>
              <p>
                Add layers like jackets or cardigans to add depth and dimension to your
                outfit. This also makes your look more versatile for changing weather.
              </p>
            </div>
          </div>
        </div>
        
        {/* My Saved Outfits (for logged-in users) */}
        {user && (
          <div className="mt-12">
            <h2 className="text-2xl font-serif mb-6">My Saved Outfits</h2>
            
            {outfitLoading ? (
              <div className="text-center py-12">
                <Loader />
              </div>
            ) : outfitError ? (
              <div className="text-center py-12">
                <p className="text-error">Error loading your saved outfits. Please try again.</p>
              </div>
            ) : outfits.length === 0 ? (
              <div className="text-center py-12 bg-light rounded-lg">
                <p className="mb-4">You haven't saved any outfits yet.</p>
                <p>Create and save outfits to see them here.</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {outfits.map(outfit => (
                  <div key={outfit.id} className="outfit-card bg-white rounded-lg shadow overflow-hidden">
                    <div className="outfit-preview grid grid-cols-3 gap-1 p-2 relative">
                      {outfit.products.slice(0, 3).map((product, index) => (
                        <div key={`${outfit.id}-${product.id}`} className="relative h-24">
                          <img
                            src={product.thumbnail || '/images/placeholder-product.jpg'}
                            alt={product.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                      ))}
                      {outfit.products.length > 3 && (
                        <div className="absolute bottom-2 right-2 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded">
                          +{outfit.products.length - 3} more
                        </div>
                      )}
                    </div>
                    
                    <div className="p-4">
                      <h3 className="font-medium mb-1">{outfit.name}</h3>
                      <p className="text-sm text-gray-500 mb-3">
                        {outfit.products.length} items
                      </p>
                      
                      <div className="flex space-x-2">
                        <button
                          className="btn btn-sm btn-secondary flex-1"
                          onClick={() => router.push(`/outfits/${outfit.id}`)}
                        >
                          View
                        </button>
                        <button
                          className="btn btn-sm btn-outline flex-1"
                          onClick={() => {
                            // Load this outfit into the builder
                            setOutfitItems(outfit.products);
                            setOutfitName(outfit.name);
                            setOutfitDescription(outfit.description || '');
                            // Scroll to top
                            window.scrollTo(0, 0);
                          }}
                        >
                          Edit
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
            
            {outfits.length > 0 && (
              <div className="text-center mt-6">
                <button
                  className="btn btn-secondary"
                  onClick={() => router.push('/outfits')}
                >
                  View All Saved Outfits
                </button>
              </div>
            )}
          </div>
        )}
        
        {/* Outfit Inspiration */}
        <div className="mt-12">
          <h2 className="text-2xl font-serif mb-6">Get Inspired</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="inspiration-card bg-white rounded-lg shadow overflow-hidden flex">
              <div className="relative w-1/3">
                <img 
                  src="/images/inspiration/casual-weekend.jpg" 
                  alt="Casual Weekend" 
                  className="absolute inset-0 w-full h-full object-cover"
                />
              </div>
              <div className="p-4 flex-1">
                <h3 className="text-xl font-medium mb-2">Casual Weekend</h3>
                <p className="mb-4">Effortless comfort for weekend errands and brunches</p>
                <button 
                  className="btn btn-sm btn-secondary"
                  onClick={() => router.push('/outfits/inspiration/casual-weekend')}
                >
                  Explore Looks
                </button>
              </div>
            </div>
            
            <div className="inspiration-card bg-white rounded-lg shadow overflow-hidden flex">
              <div className="relative w-1/3">
                <img 
                  src="/images/inspiration/office-chic.jpg" 
                  alt="Office Chic" 
                  className="absolute inset-0 w-full h-full object-cover"
                />
              </div>
              <div className="p-4 flex-1">
                <h3 className="text-xl font-medium mb-2">Office Chic</h3>
                <p className="mb-4">Professional yet fashionable looks for the workplace</p>
                <button 
                  className="btn btn-sm btn-secondary"
                  onClick={() => router.push('/outfits/inspiration/office-chic')}
                >
                  Explore Looks
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default OutfitBuilderPage;